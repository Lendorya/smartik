"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const discord_js_1 = require("discord.js");
const events_1 = __importDefault(require("events"));
class MessageInteraction extends discord_js_1.APIMessage {
    /**
     * A Message that let use Interaction
     * @param message The message that will be sent
     * @param channel Where the message will be sent
     */
    constructor(message, channel) {
        super(channel, {});
        this.buttons = [];
        this.data = {};
        this.data["content"] = message;
    }
    /**
     * Add a button to a message
     * @param label Text in the button
     * @param style Color of the button (1: blurple, 2: grey, 3: green, 4: red)
     * @param custom_id Id of the button
     * @param disabled If the button is disabled or not
     */
    addButton(label, style, custom_id, disabled) {
        if (!this.data["components"]) {
            this.data["components"] = [{
                    type: 1,
                    components: []
                }];
        }
        if (this.data["components"][this.data["components"].length - 1].components.length == 5 || (this.data["components"][this.data["components"].length - 1].components[0] && this.data["components"][this.data["components"].length - 1].components[0].type == 3)) {
            this.data["components"].push({
                type: 1,
                components: []
            });
        }
        this.data["components"][this.data["components"].length - 1]["components"].push({ label: label, style: style, type: 2, custom_id: custom_id, disabled: !disabled ? false : true });
    }
    /**
     * Add a Select menu to the message
     * @param custom_id Id of the Select menu
     * @param options Options available in this Select menu
     * @param placeholder Text on the Select menu
     * @param min_values The minimum number of values to select
     * @param max_values The maximum number of values to select
     */
    addSelectMenu(custom_id, options, placeholder, min_values, max_values) {
        if (!this.data["components"]) {
            this.data["components"] = [{
                    type: 1,
                    components: []
                }];
        }
        if (this.data["components"][this.data["components"].length - 1]["components"] != 0) {
            this.data["components"].push({
                type: 1,
                components: []
            });
        }
        this.data["components"][this.data["components"].length - 1]["components"].push({ type: 3, custom_id: custom_id, options: options, placeholder: placeholder, min_values: min_values, max_values: max_values });
    }
    /**
     * Set an embed on the message
     * @param embed An embed object
     */
    setEmbed(embed) {
        this.data["embed"] = embed;
    }
    /**
     * Wait for a button to be clicked
     * @param message The message containing the button
     * @param timeout The timeout to wait before stop waiting for a button to be clicked
     * @returns A button data
     */
    static awaitButtonClicked(message, timeout) {
        return new Promise((resolve, reject) => {
            var thisListener = (json) => {
                if (json.message.id == message.id && json.data.component_type == 2) {
                    message.client.ws.removeListener("INTERACTION_CREATE", thisListener);
                    resolve({ "status": 0, "data": json.data, "token": json.token, "id": json.id, "member": json.member });
                }
            };
            if (timeout) {
                setTimeout(() => { resolve({ "status": 1, "data": undefined, "token": undefined, "id": undefined, "member": undefined }); }, timeout);
            }
            message.client.ws.addListener("INTERACTION_CREATE", thisListener);
        });
    }
    /**
     * Wait for a select menu to be clicked
     * @param message The message containing the select menu
     * @param timeout The timeout to wait before stop waiting for a select menu to be clicked
     * @returns A select menu data
     */
    static awaitSelectMenuClicked(message, timeout) {
        return new Promise((resolve, reject) => {
            var thisListener = (json) => {
                if (json.message.id == message.id && json.data.component_type == 3) {
                    message.client.ws.removeListener("INTERACTION_CREATE", thisListener);
                    resolve({ "status": 0, "data": json.data, "token": json.token, "id": json.id, "member": json.member });
                }
            };
            if (timeout) {
                setTimeout(() => { resolve({ "status": 1, "data": undefined, "token": undefined, "id": undefined, member: undefined }); }, timeout);
            }
            message.client.ws.addListener("INTERACTION_CREATE", thisListener);
        });
    }
    /**
     * Create a listener to wait buttons or select menus to be clicked
     * @param message The message containing a component
     * @returns An event emitter
     */
    static addListener(message) {
        var eventEmitter = new events_1.default();
        var thisListener = (json) => {
            if (json.message.id == message.id) {
                if (json.data && json.data.component_type == 2) {
                    eventEmitter.emit("button_clicked", { "status": 0, "data": json.data, "token": json.token, "id": json.id, "member": json.member });
                }
                if (json.data && json.data.component_type == 3) {
                    console.log(json);
                    eventEmitter.emit("Select menu_clicked", { "status": 0, "data": json.data, "token": json.token, "id": json.id, "member": json.member });
                }
            }
        };
        eventEmitter.on("end", () => {
            eventEmitter.removeAllListeners();
        });
        message.client.ws.addListener("INTERACTION_CREATE", thisListener);
        return eventEmitter;
    }
    /**
     * Respond to an interaction
     * @param interaction_id Id of an interaction
     * @param interaction_token Token of an interaction
     */
    static respondToInteraction(interaction_id, interaction_token) {
        axios_1.default.post("https://discord.com/api/v8/interactions/" + interaction_id + "/" + interaction_token + "/callback", { "type": 6 });
    }
}
exports.default = MessageInteraction;
module.exports = MessageInteraction;
//# sourceMappingURL=MessageInteraction.js.map