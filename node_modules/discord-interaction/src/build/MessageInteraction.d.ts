/// <reference types="node" />
import { APIMessage, Message, MessageTarget } from "discord.js";
import EventEmitter from "events";
export default class MessageInteraction extends APIMessage {
    private buttons;
    /**
     * A Message that let use Interaction
     * @param message The message that will be sent
     * @param channel Where the message will be sent
     */
    constructor(message: string, channel: MessageTarget);
    /**
     * Add a button to a message
     * @param label Text in the button
     * @param style Color of the button (1: blurple, 2: grey, 3: green, 4: red)
     * @param custom_id Id of the button
     * @param disabled If the button is disabled or not
     */
    addButton(label: string, style: number, custom_id: string, disabled?: boolean): void;
    /**
     * Add a Select menu to the message
     * @param custom_id Id of the Select menu
     * @param options Options available in this Select menu
     * @param placeholder Text on the Select menu
     * @param min_values The minimum number of values to select
     * @param max_values The maximum number of values to select
     */
    addSelectMenu(custom_id: string, options: Array<{
        "label": string;
        "value": string;
        "description"?: string;
        "emoji"?: {
            "id"?: string;
            "name"?: string;
        };
    }>, placeholder: string, min_values: number, max_values: number): void;
    /**
     * Set an embed on the message
     * @param embed An embed object
     */
    setEmbed(embed: object): void;
    /**
     * Wait for a button to be clicked
     * @param message The message containing the button
     * @param timeout The timeout to wait before stop waiting for a button to be clicked
     * @returns A button data
     */
    static awaitButtonClicked(message: Message, timeout?: number): Promise<{
        status: number;
        data: {
            custom_id: string;
            component_type: 2;
        };
        token: string;
        id: string;
        member: any;
    }>;
    /**
     * Wait for a select menu to be clicked
     * @param message The message containing the select menu
     * @param timeout The timeout to wait before stop waiting for a select menu to be clicked
     * @returns A select menu data
     */
    static awaitSelectMenuClicked(message: Message, timeout?: number): Promise<{
        status: number;
        data: {
            custom_id: string;
            component_type: 3;
            values: Array<string>;
        };
        token: string;
        id: string;
        member: any;
    }>;
    /**
     * Create a listener to wait buttons or select menus to be clicked
     * @param message The message containing a component
     * @returns An event emitter
     */
    static addListener(message: Message): EventEmitter;
    /**
     * Respond to an interaction
     * @param interaction_id Id of an interaction
     * @param interaction_token Token of an interaction
     */
    static respondToInteraction(interaction_id: string, interaction_token: string): void;
}
